// params must be defined outside 'profiles' so that
// the other scopes such as 'timeline' can access it
params {
    awsRegion = 'us-east-1'
    cpus = 1 // cpus per task
    mem  = 8.GB // memory per task
}

// process settings
process {
    errorStrategy = { task.exitStatus in [252,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 1
    maxErrors = '-1'
    cpus = params.cpus
    memory = params.mem
}

profiles {
    standard {
        //process.container = 'nextflow/rnaseq-nf'
        docker {
            runOptions='-u $(id -u):$(id -g)'
            enabled=false
            }
        params.outdir = "results"
        params.tracedir = "${params.outdir}/trace"
    }

    batch {
        params {
            // the referred environment variables need predefined
            //awsQueue = 'arn:aws:batch:us-east-1:<account-id>:job-queue/<queue-name>'
            // read these two from environment variables
            awsQueue = "$batchQueue"
            container = "$batchContainer"
        }
        //process.container = 'nextflow/rnaseq-nf:latest'
        // the container can be hosted at public repos or AWS ECR
        process.container = params.container
        process.executor = 'awsbatch'
        process.queue = params.awsQueue
        params.outdir = 'batch_res'
        params.tracedir = "${params.outdir}/trace"
        //workDir = 's3://path/for/work' // required
        aws.region = params.awsRegion
        aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
        aws.batch.maxParallelTransfers = 10
        aws.batch.maxTransferAttempts = 2
    }
}

// record execution details
timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline.html"
}

trace {
    enabled = true
    file = "${params.tracedir}/execution_trace.txt"
}

report {
    enabled = true
    file = "${params.tracedir}/execution_report.html"
}

dag {
    enabled = true
    file = "${params.tracedir}/execution_dag.svg"
}


